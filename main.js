document.addEventListener('DOMContentLoaded', () => {
    
    // --- –î–ê–ù–Ü –î–õ–Ø –ü–ï–†–ï–ö–õ–ê–î–£ (i18n) ---
    const translations = {
        'ua': {
            'page_title': '–í–µ–±-—É—Ç–∏–ª—ñ—Ç–∏',
            'sidebar_header': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏',
            'nav_qr': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥—ñ–≤',
            'nav_md': 'Markdown –¥–æ HTML',
            'nav_unit': '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –û–¥–∏–Ω–∏—Ü—å',
            'nav_json': '–í–∞–ª—ñ–¥–∞—Ç–æ—Ä JSON',
            
            'qr_title': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥—ñ–≤',
            'qr_input_label': '–¢–µ–∫—Å—Ç –∞–±–æ URL:',
            'qr_input_placeholder': '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ URL...',
            'qr_color_label': '–ö–æ–ª—ñ—Ä –∫–æ–¥—É:',
            'qr_size_label': '–†–æ–∑–º—ñ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:',
            'qr_size_small': '–ú–∞–ª–∏–π (128x128)',
            'qr_size_medium': '–°–µ—Ä–µ–¥–Ω—ñ–π (256x256)',
            'qr_size_large': '–í–µ–ª–∏–∫–∏–π (512x512)',
            'qr_download_btn': '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏',
            'qr_error_lib': '–ü–æ–º–∏–ª–∫–∞: –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ QRCode –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.',
            'qr_error_gen': '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó QR-–∫–æ–¥—É.',
            'qr_download_placeholder': '–°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ QR-–∫–æ–¥.',
            
            'md_title': 'Markdown –¥–æ HTML',
            'md_input_label': '–í—Ö—ñ–¥–Ω–∏–π Markdown:',
            'md_input_placeholder': '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ Markdown...',
            'md_output_label': '–í–∏—Ö—ñ–¥–Ω–∏–π HTML:',
            'md_output_placeholder': 'HTML —Ä–µ–∑—É–ª—å—Ç–∞—Ç...',
            'md_copy_btn': '–ö–æ–ø—ñ—é–≤–∞—Ç–∏ HTML',
            'md_copy_success': '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ! ‚úÖ',
            'md_copy_fallback': '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ! (Fallback) ‚úÖ',

            'unit_title': '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –û–¥–∏–Ω–∏—Ü—å –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è',
            'unit_value_label': '–ó–Ω–∞—á–µ–Ω–Ω—è:',
            'unit_from_label': '–ó:',
            'unit_to_label': '–í:',
            'unit_group_length': '–î–æ–≤–∂–∏–Ω–∞',
            'unit_group_area': '–ü–ª–æ—â–∞',
            'unit_group_mass': '–í–∞–≥–∞',
            'unit_group_volume': "–û–±'—î–º",
            'unit_group_temp': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'unit_default_result': '–†–µ–∑—É–ª—å—Ç–∞—Ç:', 
            'unit_err_number': '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.',
            'unit_err_select': (type) => `–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "${type}".`,
            'unit_err_convert': '–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–æ–∂–ª–∏–≤–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏.',
            'unit_err_conversion': '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è.',
            'unit_m': '–ú–µ—Ç—Ä–∏ (m)',
            'unit_km': '–ö—ñ–ª–æ–º–µ—Ç—Ä–∏ (km)',
            'unit_mi': '–ú–∏–ª—ñ (mi)',
            'unit_ft': '–§—É—Ç–∏ (ft)',
            'unit_sqm': '–ö–≤. –ú–µ—Ç—Ä–∏ (–º¬≤)',
            'unit_sqkm': '–ö–≤. –ö—ñ–ª–æ–º–µ—Ç—Ä–∏ (–∫–º¬≤)',
            'unit_acre': '–ê–∫—Ä–∏',
            'unit_ha': '–ì–µ–∫—Ç–∞—Ä–∏ (–≥–∞)',
            'unit_kg': '–ö—ñ–ª–æ–≥—Ä–∞–º–∏ (kg)',
            'unit_g': '–ì—Ä–∞–º–∏ (g)',
            'unit_lb': '–§—É–Ω—Ç–∏ (lb)',
            'unit_oz': '–£–Ω—Ü—ñ—ó (oz)',
            'unit_l': '–õ—ñ—Ç—Ä–∏ (L)',
            'unit_ml': '–ú—ñ–ª—ñ–ª—ñ—Ç—Ä–∏ (mL)',
            'unit_gal': '–ì–∞–ª–æ–Ω–∏ (gal)',
            'unit_m3': '–ö—É–±. –ú–µ—Ç—Ä–∏ (–º¬≥)',
            'unit_C': '–¶–µ–ª—å—Å—ñ–π (¬∞C)',
            'unit_F': '–§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)',
            'unit_K': '–ö–µ–ª—å–≤—ñ–Ω (K)',

            'json_title': '–í–∞–ª—ñ–¥–∞—Ç–æ—Ä / –§–æ—Ä–º–∞—Ç–µ—Ä JSON',
            'json_input_label': '–í—Å—Ç–∞–≤—Ç–µ –∫–æ–¥ JSON —Ç—É—Ç:',
            'json_input_placeholder': '–í—Å—Ç–∞–≤—Ç–µ –∫–æ–¥ JSON —Ç—É—Ç...',
            'json_format_btn': '–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ JSON',
            'json_validate_btn': '–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ JSON',
            'json_output_label': '–†–µ–∑—É–ª—å—Ç–∞—Ç:',
            'json_status_empty': '–í—Å—Ç–∞–≤—Ç–µ JSON –∫–æ–¥.',
            'json_status_valid': 'JSON –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–∞ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ. ‚úÖ',
            'json_status_error': (message) => `–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó JSON: ${message}`,
            
            'theme_toggle_title_light': '–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞ —Ç–µ–º–Ω—É —Ç–µ–º—É',
            'theme_toggle_title_dark': '–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞ —Å–≤—ñ—Ç–ª—É —Ç–µ–º—É'
        },
        'en': {
            'page_title': 'Web Utilities',
            'sidebar_header': 'Utilities',
            'nav_qr': 'QR Code Generator',
            'nav_md': 'Markdown to HTML',
            'nav_unit': 'Unit Converter',
            'nav_json': 'JSON Validator',

            'qr_title': 'QR Code Generator',
            'qr_input_label': 'Text or URL:',
            'qr_input_placeholder': 'Enter text or URL...',
            'qr_color_label': 'Code Color:',
            'qr_size_label': 'Download Size:',
            'qr_size_small': 'Small (128x128)',
            'qr_size_medium': 'Medium (256x256)',
            'qr_size_large': 'Large (512x512)',
            'qr_download_btn': 'Download',
            'qr_error_lib': 'Error: QRCode library not loaded.',
            'qr_error_gen': 'QR code generation error.',
            'qr_download_placeholder': 'Generate QR code first.',

            'md_title': 'Markdown to HTML',
            'md_input_label': 'Markdown Input:',
            'md_input_placeholder': 'Enter Markdown text...',
            'md_output_label': 'HTML Output:',
            'md_output_placeholder': 'HTML result...',
            'md_copy_btn': 'Copy HTML',
            'md_copy_success': 'Copied! ‚úÖ',
            'md_copy_fallback': 'Copied! (Fallback) ‚úÖ',

            'unit_title': 'Unit Converter',
            'unit_value_label': 'Value:',
            'unit_from_label': 'From:',
            'unit_to_label': 'To:',
            'unit_group_length': 'Length',
            'unit_group_area': 'Area',
            'unit_group_mass': 'Mass',
            'unit_group_volume': 'Volume',
            'unit_group_temp': 'Temperature',
            'unit_default_result': 'Result:', 
            'unit_err_number': 'Please enter a numeric value.',
            'unit_err_select': (type) => `Please select a unit to convert from the "${type}" category.`,
            'unit_err_convert': 'Error: Cannot convert.',
            'unit_err_conversion': 'Conversion error.',
            'unit_m': 'Meters (m)',
            'unit_km': 'Kilometers (km)',
            'unit_mi': 'Miles (mi)',
            'unit_ft': 'Feet (ft)',
            'unit_sqm': 'Square Meters (m¬≤)',
            'unit_sqkm': 'Square Kilometers (km¬≤)',
            'unit_acre': 'Acres',
            'unit_ha': 'Hectares (ha)',
            'unit_kg': 'Kilograms (kg)',
            'unit_g': 'Grams (g)',
            'unit_lb': 'Pounds (lb)',
            'unit_oz': 'Ounces (oz)',
            'unit_l': 'Liters (L)',
            'unit_ml': 'Milliliters (mL)',
            'unit_gal': 'Gallons (gal)',
            'unit_m3': 'Cubic Meters (m¬≥)',
            'unit_C': 'Celsius (¬∞C)',
            'unit_F': 'Fahrenheit (¬∞F)',
            'unit_K': 'Kelvin (K)',

            'json_title': 'JSON Validator / Formatter',
            'json_input_label': 'Paste JSON code here:',
            'json_input_placeholder': 'Paste JSON code here...',
            'json_format_btn': 'Format JSON',
            'json_validate_btn': 'Validate JSON',
            'json_output_label': 'Result:',
            'json_status_empty': 'Paste JSON code.',
            'json_status_valid': 'JSON is valid and formatted. ‚úÖ',
            'json_status_error': (message) => `JSON validation error: ${message}`,

            'theme_toggle_title_light': 'Switch to dark theme',
            'theme_toggle_title_dark': 'Switch to light theme'
        }
    };
    
    // --- –ó–ú–Ü–ù–ù–Ü –Ü –°–•–û–í–ò–©–ï ---
    let currentLang = localStorage.getItem('lang') || 'en';
    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç–µ–º–∞ —Å–≤—ñ—Ç–ª–∞, —è–∫—â–æ —ñ–Ω—à–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage
    let currentTheme = localStorage.getItem('theme') || 'light';

    // --- –õ–û–ì–Ü–ö–ê –¢–ï–ú–ò ---

    function setTheme(theme) {
        console.log("setTheme() called. Attempting to set theme to:", theme); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –ª–æ–≥
        currentTheme = theme;
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
        
        const themeIcon = document.getElementById('theme-icon');
        const themeToggle = document.getElementById('theme-toggle');

        if (themeIcon && themeToggle) {
            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É —Ç–∞ title –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ù–û–í–û–á —Ç–µ–º–∏
            if (theme === 'dark') {
                themeIcon.textContent = '‚òÄÔ∏è'; // –°–æ–Ω—Ü–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–≤—ñ—Ç–ª—É
                themeToggle.title = translations[currentLang]['theme_toggle_title_dark'];
            } else {
                themeIcon.textContent = 'üåô'; // –ú—ñ—Å—è—Ü—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Ç–µ–º–Ω—É
                themeToggle.title = translations[currentLang]['theme_toggle_title_light'];
            }
            console.log(`Theme icon set to '${themeIcon.textContent}', title set to '${themeToggle.title}'`); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –ª–æ–≥
        } else {
            console.error("Theme icon or theme toggle button not found. Cannot update icon/title."); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
        }
    }
    
    function toggleTheme() {
        console.log("toggleTheme() called!"); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –ª–æ–≥
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        setTheme(newTheme);
    }
    
    // --- –õ–û–ì–Ü–ö–ê –ú–û–í–ò ---
    
    function setLanguage(lang) {
        console.log("setLanguage() called. Setting language to:", lang); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –ª–æ–≥
        currentLang = lang;
        const t = translations[lang];

        // 1. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        document.querySelectorAll('[data-i18n]').forEach(el => {
            const key = el.getAttribute('data-i18n');
            if (t[key]) {
                el.textContent = t[key];
            }
        });

        // 2. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤
        document.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
            const key = el.getAttribute('data-i18n-placeholder');
            if (t[key]) {
                el.placeholder = t[key];
            }
        });

        // 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è optgroup labels
        document.querySelectorAll('optgroup[data-i18n-label]').forEach(el => {
            const key = el.getAttribute('data-i18n-label');
            if (t[key]) {
                 el.label = t[key];
            }
        });
        
        // 4. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º–æ–≤–∏
        const langCode = document.getElementById('lang-code');
        if (langCode) {
            langCode.textContent = lang === 'ua' ? 'EN' : 'UA';
        }
        
        // 5. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ç—Ä–∏–±—É—Ç—É lang —Ç–∞ title —Ç–µ–º–∏
        document.documentElement.lang = lang;
        document.title = t.page_title;
        // –í–∞–∂–ª–∏–≤–æ: –≤–∏–∫–ª–∏–∫–∞—î–º–æ setTheme —Ç—É—Ç, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ title –∫–Ω–æ–ø–∫–∏ —Ç–µ–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ù–û–í–û–á –º–æ–≤–∏.
        setTheme(currentTheme); 
        
        // 6. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è (–¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
        localStorage.setItem('lang', lang);
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if (activeUtilityId === 'unit-converter') {
            updateToOptions();
        }
        if (activeUtilityId === 'json-tools') validateAndFormatJSON(); // –ë–µ–∑ –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è, —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (activeUtilityId === 'qr-generator') {
             // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è QR
             const qrMessage = document.getElementById('qr-message');
             if (qrMessage && qrMessage.textContent) {
                 // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à —Ä–æ–∑—É–º–Ω—É –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å,
                 // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ "–∫–ª—é—á" –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π.
                 // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –æ–Ω–æ–≤–∏–º–æ, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –∞–∫—Ç–∏–≤–Ω–∏–º.
                 const currentMsgText = qrMessage.textContent;
                 if (currentMsgText.includes(translations['ua'].qr_error_lib.split(':')[0]) || currentMsgText.includes(translations['en'].qr_error_lib.split(':')[0])) {
                     qrMessage.textContent = t.qr_error_lib;
                 } else if (currentMsgText.includes(translations['ua'].qr_error_gen.split(':')[0]) || currentMsgText.includes(translations['en'].qr_error_gen.split(':')[0])) {
                      qrMessage.textContent = t.qr_error_gen;
                 } else if (currentMsgText.includes(translations['ua'].qr_download_placeholder.split(':')[0]) || currentMsgText.includes(translations['en'].qr_download_placeholder.split(':')[0])) {
                      qrMessage.textContent = t.qr_download_placeholder;
                 }
             }
             // –Ø–∫—â–æ QR-–∫–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä—É—î–º–æ –π–æ–≥–æ, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–ª—ñ—Ä, —è–∫—â–æ –º–æ–≤–∞ –≤–ø–ª–∏–Ω—É–ª–∞ –Ω–∞ –ø–∞–ª—ñ—Ç—Ä—É (—Ö–æ—á–∞ —Ç—É—Ç –Ω–µ –≤–ø–ª–∏–≤–∞—î)
             // generateQrCode(); 
        }
    }
    
    function toggleLanguage() {
        console.log("toggleLanguage() called!"); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –ª–æ–≥
        const newLang = currentLang === 'ua' ? 'en' : 'ua';
        setLanguage(newLang);
    }

    // --- –î–ê–ù–Ü –ö–û–ù–í–ï–†–¢–ï–†–ê –û–î–ò–ù–ò–¶–¨ ---
    const unitConversionData = {
        'length': { 'm': 1, 'km': 1000, 'mi': 1609.34, 'ft': 0.3048 }, 
        'area': { 'sqm': 1, 'sqkm': 1000000, 'acre': 4046.86, 'ha': 10000 }, 
        'mass': { 'kg': 1, 'g': 0.001, 'lb': 0.453592, 'oz': 0.0283495 },
        'volume': { 'l': 1, 'ml': 0.001, 'gal': 3.78541, 'm3': 1000 },
        'temperature': { 'C': true, 'F': true, 'K': true }
    };

    function getUnitType(unit) {
        for (const type in unitConversionData) {
            if (unitConversionData[type][unit]) {
                return type;
            }
        }
        return null;
    }
    
    function updateToOptions() {
        const unitFrom = document.getElementById('unit-from');
        const unitTo = document.getElementById('unit-to');
        if (!unitFrom || !unitTo) return;

        const selectedFromUnit = unitFrom.value;
        const selectedType = getUnitType(selectedFromUnit);
        let currentToUnit = unitTo.value;

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ "–¥–æ" –∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –π–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏
        const tempCurrentToUnit = unitTo.value;

        unitTo.innerHTML = '';
        const optgroups = unitFrom.querySelectorAll('optgroup');
        let foundMatch = false;

        optgroups.forEach(group => {
            const groupType = group.getAttribute('data-unit-type');
            if (groupType === selectedType) {
                const newGroup = document.createElement('optgroup');
                newGroup.label = group.label;
                newGroup.setAttribute('data-unit-type', groupType);
                const i18nKey = group.getAttribute('data-i18n-label');
                if (i18nKey) {
                    newGroup.setAttribute('data-i18n-label', i18nKey);
                }
                
                group.querySelectorAll('option').forEach(option => {
                    // –ù–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ç—É —Å–∞–º—É –æ–¥–∏–Ω–∏—Ü—é, —â–æ "–∑"
                    if (option.value === selectedFromUnit) { return; }
                    
                    const newOption = document.createElement('option');
                    newOption.value = option.value;
                    
                    const i18nKey = option.getAttribute('data-i18n');
                    if (i18nKey) {
                        newOption.setAttribute('data-i18n', i18nKey);
                        newOption.textContent = translations[currentLang][i18nKey] || option.textContent;
                    } else {
                        newOption.textContent = option.textContent;
                    }
                    
                    if (newOption.value === tempCurrentToUnit) {
                        newOption.selected = true; // –°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä
                        foundMatch = true;
                    }
                    newGroup.appendChild(newOption);
                });
                
                if (newGroup.children.length > 0) { unitTo.appendChild(newGroup); }
            }
        });
        
        // –Ø–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î "–¥–æ" –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –±—É–ª–æ –∂–æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, –≤–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–∏–π
        if (!foundMatch && unitTo.options.length > 0) { unitTo.selectedIndex = 0; }

        performConversion();
    }

    function performConversion() {
        const unitValue = document.getElementById('unit-value');
        const unitFrom = document.getElementById('unit-from');
        const unitTo = document.getElementById('unit-to');
        const unitResult = document.getElementById('unit-result');
        if (!unitValue || !unitFrom || !unitTo || !unitResult) return;

        const t = translations[currentLang];
        const value = parseFloat(unitValue.value);
        const from = unitFrom.value;
        const to = unitTo.value;
        const type = getUnitType(from);
        
        if (isNaN(value) || value < 0) {
            unitResult.textContent = t.unit_err_number;
            return;
        }
        
        if (!to) {
            // –û–Ω–æ–≤–ª–µ–Ω–æ: –∑–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ translations –Ω–∞–ø—Ä—è–º—É, –æ—Å–∫—ñ–ª—å–∫–∏ label –º–æ–∂–µ –±—É—Ç–∏ —â–µ –Ω–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–Ω–æ–≤–ª–µ–Ω–æ DOM
            const groupKey = `unit_group_${type}`;
            const groupName = t[groupKey] || type;
            unitResult.textContent = t.unit_err_select(groupName); 
            return;
        }

        let result = null; // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ null, —â–æ–± —á—ñ—Ç–∫–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏ –≤—ñ–¥ 0

        if (type === 'temperature') {
            if (from === to) result = value;
            else {
                let K_val; // –ó–Ω–∞—á–µ–Ω–Ω—è –≤ –ö–µ–ª—å–≤—ñ–Ω–∞—Ö
                if (from === 'C') K_val = value + 273.15;
                else if (from === 'F') K_val = (value - 32) * 5/9 + 273.15;
                else if (from === 'K') K_val = value;
                else K_val = NaN; // –î–ª—è –Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ "–∑"
                
                if (isNaN(K_val)) {
                    unitResult.textContent = t.unit_err_conversion;
                    return;
                }

                if (to === 'C') result = K_val - 273.15;
                else if (to === 'F') result = (K_val - 273.15) * 9/5 + 32;
                else if (to === 'K') result = K_val;
                else result = NaN; // –î–ª—è –Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ "–≤"
            }
        } else if (type && unitConversionData[type] && unitConversionData[type][from] && unitConversionData[type][to]) {
            const factors = unitConversionData[type];
            const valueInBase = value * factors[from];
            result = valueInBase / factors[to];
        } else {
            unitResult.textContent = t.unit_err_convert;
            return;
        }
        
        if (result !== null && !isNaN(result)) {
            const formattedResult = result.toFixed(result < 1 && result !== 0 ? 6 : 4).replace(/\.0+$/, ''); 
            unitResult.textContent = `${t.unit_default_result} ${value} ${from} = ${formattedResult} ${to}`;
        } else {
            unitResult.textContent = t.unit_err_conversion;
        }
    }
    
    // --- –õ–û–ì–Ü–ö–ê –ü–ï–†–ï–ú–ò–ö–ê–ù–ù–Ø –Ü–ù–°–¢–†–£–ú–ï–ù–¢–Ü–í ---
    const navLinks = document.querySelectorAll('.nav-link');
    const utilityCards = document.querySelectorAll('.utility-card');
    let activeUtilityId = 'qr-generator'; 

    const switchUtility = (targetId) => {
        console.log("Switching utility to:", targetId); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –ª–æ–≥
        utilityCards.forEach(card => { card.style.display = 'none'; });
        navLinks.forEach(link => { link.classList.remove('active'); });
        const targetCard = document.getElementById(targetId);
        if (targetCard) { targetCard.style.display = 'flex'; }
        document.querySelector(`.nav-link[data-target="${targetId}"]`)?.classList.add('active');
        activeUtilityId = targetId;
        
        // –í–∏–∫–ª–∏–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö/–æ–Ω–æ–≤–ª—é–≤–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
        if (targetId === 'qr-generator') {
            const qrInputEl = document.getElementById('qr-input');
            if (qrInputEl) qrInputEl.value = qrInputEl.value || ''; // –©–æ–± –Ω–µ –±—É–ª–æ null
            generateQrCode();
        } else if (targetId === 'markdown-converter') {
            const mdInputEl = document.getElementById('markdown-input');
            if (mdInputEl) mdInputEl.value = mdInputEl.value || '';
            updateMarkdownConversion();
        } else if (targetId === 'unit-converter') {
            initUnitConverter();
        } else if (targetId === 'json-tools') {
            const jsonInputEl = document.getElementById('json-input');
            if (jsonInputEl) jsonInputEl.value = jsonInputEl.value || '';
            validateAndFormatJSON(true); // –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ, —è–∫—â–æ —î —Ç–µ–∫—Å—Ç
        }
    };
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            switchUtility(link.getAttribute('data-target')); 
        });
    });
    
    function initUnitConverter() {
        console.log("Initializing Unit Converter."); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –ª–æ–≥
        const unitValue = document.getElementById('unit-value');
        const unitFrom = document.getElementById('unit-from');
        const unitTo = document.getElementById('unit-to'); // –î–æ–¥–∞–Ω–æ —Å—é–¥–∏

        if (unitValue && unitFrom && unitTo) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Ç—Ä—å–æ—Ö
            // –ü—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 1
            if (!unitValue.value) unitValue.value = '1'; 
            
            // –î–æ–¥–∞–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ–± –Ω–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª—É—Ö–∞—á—ñ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
            // –¶–µ –Ω–µ –∑–æ–≤—Å—ñ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ, —è–∫—â–æ switchUtility –∑–∞–±–µ–∑–ø–µ—á—É—î –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é,
            // –∞–ª–µ —î –±–µ–∑–ø–µ—á–Ω–∏–º –ø–∞—Ç–µ—Ä–Ω–æ–º –¥–ª—è "init" —Ñ—É–Ω–∫—Ü—ñ–π.
            if (!unitFrom.dataset.listenersAdded) {
                unitFrom.addEventListener('change', updateToOptions);
                unitFrom.dataset.listenersAdded = true;
            }
            if (!unitTo.dataset.listenersAdded) {
                 unitTo.addEventListener('change', performConversion);
                 unitTo.dataset.listenersAdded = true;
            }
            if (!unitValue.dataset.listenersAdded) {
                unitValue.addEventListener('input', performConversion);
                unitValue.addEventListener('change', performConversion); // change –¥–ª—è –≤–≤–æ–¥—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ —Å—Ç—Ä—ñ–ª–æ–∫
                unitValue.dataset.listenersAdded = true;
            }

            updateToOptions(); // –û–Ω–æ–≤–ª—é—î–º–æ –æ–ø—Ü—ñ—ó "–í" —Ç–∞ –≤–∏–∫–æ–Ω—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é
        } else {
             console.error("Unit converter elements not found (unit-value, unit-from, or unit-to).");
        }
    }
    
    function validateAndFormatJSON(format = false) {
        const jsonInput = document.getElementById('json-input');
        const jsonOutputPre = document.getElementById('json-output-pre');
        const jsonStatus = document.getElementById('json-status');
        if (!jsonInput || !jsonOutputPre || !jsonStatus) return;
        
        const t = translations[currentLang];
        const jsonText = jsonInput.value.trim();
        jsonOutputPre.textContent = '';
        jsonStatus.style.color = 'red';
        
        if (!jsonText) {
            jsonStatus.textContent = t.json_status_empty;
            jsonInput.classList.remove('is-valid', 'is-invalid');
            return;
        }
        
        try {
            const jsonObject = JSON.parse(jsonText);
            const formattedJson = JSON.stringify(jsonObject, null, 2);
            jsonOutputPre.textContent = formattedJson;
            jsonStatus.textContent = t.json_status_valid;
            jsonStatus.style.color = 'green';
            jsonInput.classList.remove('is-invalid');
            jsonInput.classList.add('is-valid');
        } catch (e) {
            jsonStatus.textContent = t.json_status_error(e.message);
            jsonOutputPre.textContent = '';
            jsonInput.classList.remove('is-valid');
            jsonInput.classList.add('is-invalid');
        }
    }
    
    function generateQrCode() {
        const qrInput = document.getElementById('qr-input');
        const qrcodeDiv = document.getElementById('qrcode');
        const downloadQrBtn = document.getElementById('download-qr-btn');
        const qrMessage = document.getElementById('qr-message');
        const qrColorSelect = document.getElementById('qr-color-select'); 
        
        if (!qrInput || !qrcodeDiv || !downloadQrBtn || !qrMessage || !qrColorSelect) {
            console.error("One or more QR code elements not found.");
            return;
        }
        
        const t = translations[currentLang];
        const text = qrInput.value.trim();
        qrcodeDiv.innerHTML = ''; // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π QR-–∫–æ–¥
        downloadQrBtn.style.display = 'none';
        qrMessage.textContent = '';
        
        const size = parseInt(document.getElementById('qr-size-select')?.value || '256', 10);
        const selectedColor = qrColorSelect.value;
        
        if (typeof QRCode === 'undefined') {
            qrMessage.textContent = t.qr_error_lib;
            return;
        }
        if (text) {
            try {
                new QRCode(qrcodeDiv, {
                    text: text,
                    width: size, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É—Ç —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó, —â–æ–± –º–∞—Ç–∏ –≤–µ–ª–∏–∫–∏–π canvas
                    height: size,
                    colorDark: selectedColor, 
                    colorLight: "#ffffff", 
                    correctLevel: QRCode.CorrectLevel.H
                });
                downloadQrBtn.style.display = 'block';
            } catch (error) {
                qrMessage.textContent = t.qr_error_gen;
                console.error("Error generating QR code:", error);
            }
        } else {
             // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
             downloadQrBtn.style.display = 'none';
        }
    }

    function updateMarkdownConversion() {
        const markdownInput = document.getElementById('markdown-input');
        const htmlOutput = document.getElementById('html-output');
        if (typeof marked === 'undefined' || !markdownInput || !htmlOutput) {
            console.error("Markdown elements or 'marked' library not found.");
            return;
        } 
        const markdownText = markdownInput.value;
        if (markdownText.trim()) {
            const htmlText = marked.parse(markdownText);
            htmlOutput.value = htmlText;
        } else {
            htmlOutput.value = '';
        }
    }
    
    // --- –ü–û–ß–ê–¢–ö–û–í–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
    
    // 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–º–∏ —Ç–∞ –º–æ–≤–∏
    setTheme(currentTheme); // –ü–µ—Ä—à–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ç–µ–º–∏
    setLanguage(currentLang); // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–æ–≤–∏, —è–∫–µ —Ç–∞–∫–æ–∂ –æ–Ω–æ–≤–∏—Ç—å title –∫–Ω–æ–ø–∫–∏ —Ç–µ–º–∏

    // 2. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–µ–º–∏ —Ç–∞ –º–æ–≤–∏
    const themeToggleBtn = document.getElementById('theme-toggle');
    const languageToggleBtn = document.getElementById('language-toggle');

    console.log("Found theme-toggle:", themeToggleBtn); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –ª–æ–≥
    console.log("Found language-toggle:", languageToggleBtn); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –ª–æ–≥

    if (themeToggleBtn) {
        themeToggleBtn.addEventListener('click', toggleTheme);
    } else {
        console.error("–ï–ª–µ–º–µ–Ω—Ç #theme-toggle –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–ª—É—Ö–∞—á–∞.");
    }

    if (languageToggleBtn) {
        languageToggleBtn.addEventListener('click', toggleLanguage);
    } else {
        console.error("–ï–ª–µ–º–µ–Ω—Ç #language-toggle –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–ª—É—Ö–∞—á–∞.");
    }
    
    // 3. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
    const initialUtility = 'qr-generator'; 
    switchUtility(initialUtility);
    
    const qrInput = document.getElementById('qr-input');
    const qrSizeSelect = document.getElementById('qr-size-select');
    const downloadQrBtn = document.getElementById('download-qr-btn');
    const qrColorSelect = document.getElementById('qr-color-select');
    
    if (qrInput && qrSizeSelect && downloadQrBtn && qrColorSelect) {
        qrInput.addEventListener('input', generateQrCode);
        qrColorSelect.addEventListener('input', generateQrCode); 
        qrSizeSelect.addEventListener('change', generateQrCode); // –î–æ–¥–∞–Ω–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è QR –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        
        downloadQrBtn.addEventListener('click', () => {
            const qrcodeDiv = document.getElementById('qrcode');
            const qrMessage = document.getElementById('qr-message');
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ qrcodeDiv canvas (—Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è qrcodejs)
            const canvas = qrcodeDiv ? qrcodeDiv.querySelector('canvas') : null; 
            const t = translations[currentLang];

            if (canvas) {
                // –†–æ–∑–º—ñ—Ä –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ—Ä–µ–º–æ –∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                const downloadSize = parseInt(qrSizeSelect.value, 10);
                
                // –°—Ç–≤–æ—Ä–∏–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π canvas –¥–ª—è –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                const tempCanvas = document.createElement('canvas');
                tempCanvas.width = downloadSize;
                tempCanvas.height = downloadSize;
                const tempCtx = tempCanvas.getContext('2d');
                
                // –ú–∞–ª—é—î–º–æ –≤–º—ñ—Å—Ç —ñ—Å–Ω—É—é—á–æ–≥–æ canvas –Ω–∞ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º
                tempCtx.drawImage(canvas, 0, 0, downloadSize, downloadSize);

                const dataURL = tempCanvas.toDataURL("image/png");
                const a = document.createElement('a');
                a.href = dataURL;
                a.download = `qrcode_${downloadSize}x${downloadSize}_${qrColorSelect.value.replace('#', '')}.png`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            } else {
                qrMessage.textContent = t.qr_download_placeholder;
            }
        });
    } else {
        console.error("One or more QR code UI elements not found for event listeners.");
    }

    const markdownInput = document.getElementById('markdown-input');
    const copyHtmlBtn = document.getElementById('copy-html-btn');
    if (markdownInput && copyHtmlBtn) {
        markdownInput.addEventListener('input', updateMarkdownConversion);
        copyHtmlBtn.addEventListener('click', () => {
            const htmlOutput = document.getElementById('html-output');
            const t = translations[currentLang];
            if (!htmlOutput) {
                console.error("HTML output element not found for coping.");
                return;
            }
            navigator.clipboard.writeText(htmlOutput.value).then(() => {
                 copyHtmlBtn.textContent = t.md_copy_success;
                 setTimeout(() => { copyHtmlBtn.textContent = t.md_copy_btn; }, 2000);
            }).catch(err => {
                console.warn('Failed to copy using clipboard API, falling back to document.execCommand:', err);
                htmlOutput.select();
                try {
                    document.execCommand('copy');
                    copyHtmlBtn.textContent = t.md_copy_fallback;
                    setTimeout(() => { copyHtmlBtn.textContent = t.md_copy_btn; }, 2000);
                } catch (fallbackErr) {
                    console.error('Fallback copy also failed:', fallbackErr);
                    // –î–æ–¥–∞–π—Ç–µ —Ç—É—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                }
            });
        });
    } else {
        console.error("Markdown input or copy button not found for event listeners.");
    }
    
    // JSON tools event listeners
    const jsonInput = document.getElementById('json-input');
    const formatJsonBtn = document.getElementById('format-json-btn');
    const validateJsonBtn = document.getElementById('validate-json-btn');
    if (jsonInput && formatJsonBtn && validateJsonBtn) {
        jsonInput.addEventListener('input', () => validateAndFormatJSON(true)); // –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ
        formatJsonBtn.addEventListener('click', () => validateAndFormatJSON(true));
        validateJsonBtn.addEventListener('click', () => validateAndFormatJSON(false)); // –¢—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏
    } else {
        console.error("JSON tool elements not found for event listeners.");
    }
});